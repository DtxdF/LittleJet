#!/bin/sh
#
# Copyright (c) 2024, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DEPLOY_NAME="deploy.scale"

main()
{
    local lib_subr
    lib_subr="${LITTLEJET_LIB_SUBR}"

    if [ -z "${lib_subr}" ]; then
        echo "LITTLEJET_LIB_SUBR: environment variable hasn't been defined." >&2
        return 78 # EX_CONFIG
    fi

    if [ ! -f "${lib_subr}" ]; then
        echo "${lib_subr}: library cannot be found." >&2
        return 66 # EX_NOINPUT
    fi
    
    . "${lib_subr}"

    load_config

    setname "${DEPLOY_NAME}"

    checkdependency jq

    local project
    project="${LITTLEJET_PROJECT}"

    if [ -z "${project}" ]; then
        err "LITTLEJET_PROJECT: environment variable hasn't been defined."
        return ${EX_CONFIG}
    fi

    if ! checkprojectname "${project}"; then
        err "${project}: invalid project name."
        exit ${EX_DATAERR}
    fi

    if ! checkproject "${project}"; then
        err "${project}: project cannot be found."
        exit ${EX_NOINPUT}
    fi

    atexit_init
    atexit_add ". \"${lib_subr}\""
    atexit_add "setname \"${DEPLOY_NAME}\""
    atexit_add "load_config"

    local _o
    local min=1
    local max=0
    local rctl_rules=
    local stabilization_window=30
    local scale_type="any-jail"
    local scale_time=15

    while getopts ":m:M:r:S:t:T:" _o; do
        case "${_o}" in
            m)
                min="${OPTARG}"
                ;;
            M)
                max="${OPTARG}"
                ;;
            r)
                rctl_rules="${OPTARG}"
                ;;
            S)
                stabilization_window="${OPTARG}"
                ;;
            t)
                scale_type="${OPTARG}"
                ;;
            T)
                scale_time="${OPTARG}"
                ;;
            *)
                usage
                ;;
        esac
    done
    shift $((OPTIND-1))

    if ! checknumber "${min}"; then
        err "${min}: invalid number."
        return ${EX_DATAERR}
    fi

    if [ ${min} -lt 1 ]; then
        err "${min}: too low number."
        return ${EX_DATAERR}
    fi

    if ! checknumber "${max}"; then
        err "${max}: invalid number."
        return ${EX_DATAERR}
    fi

    if [ ${max} -lt 0 ]; then
        err "${max}: too low number."
        return ${EX_DATAERR}
    fi

    if [ ${max} -ne 0 ] && [ ${max} -lt ${min} ]; then
        err "${max} < ${min}: the maximum number of replicas cannot be less than the minimum."
        return ${EX_DATAERR}
    fi

    if ! checknumber "${scale_time}"; then
        err "${scale_time}: invalid number."
        return ${EX_DATAERR}
    fi

    if [ ${scale_time} -lt 0 ]; then
        err "${scale_time}: too low number."
        return ${EX_DATAERR}
    fi

    if ! checknumber "${stabilization_window}"; then
        err "${stabilization_window}: invalid number."
        return ${EX_DATAERR}
    fi

    if [ ${stabilization_window} -lt 0 ]; then
        err "${stabilization_window}: too low number."
        return ${EX_DATAERR}
    fi

    case "${scale_type}" in
        any-jail|any-project|average|percent-jail=*|percent-project=*) ;;
        *) err "${scale_type}: invalid scale type."; return ${EX_DATAERR} ;;
    esac

    local nodes
    nodes=`jet get-nodes "${project}"` || return $?

    if [ -z "${nodes}" ]; then
        return ${EX_CANTCREAT}
    fi

    if [ ${max} -eq 0 ]; then
        max=`echo -e "${nodes}" | wc -l | tr -d ' '`
    fi

    local good_count=0 good_list=
    local bad_count=0 bad_list=

    local errlevel

    local node
    for node in ${nodes}; do
        info "Checking health of project '${project}' on node '${node}'"

        errlevel=`checkprojecthealth "${project}" "${node}"`

        errlevel=$?

        if [ ${errlevel} -eq 0 ]; then
            good_count=$((good_count+1))

            if [ -z "${good_list}" ]; then
                good_list="${node}"
            else
                good_list="${good_list} ${node}"
            fi
        elif [ ${errlevel} -eq 1 ]; then
            # Nodes with which we can interact but whose project is in poor condition.
            
            bad_count=$((bad_count+1))

            if [ -z "${bad_list}" ]; then
                bad_list="${node}"
            else
                bad_list="${bad_list} ${node}"
            fi
        else
            #
            # The Good, the Bad and the Ugly.
            #
            # Ignore nodes that we cannot interact with.
            #
        fi
    done

    # We need more replicas!
    if [ ${good_count} -lt ${min} ]; then
        if [ ${bad_count} -eq 0 ]; then
            err "Insufficient nodes to replicate the project (${good_count}/${min})!"
            return ${EX_UNAVAILABLE}
        fi

        local count=0

        local total
        total=$((min-good_count))

        info "Scaling (${good_count}/${min})"

        nodes=

        for node in ${bad_list}; do
            count=$((count+1))

            if [ -z "${nodes}" ]; then
                nodes="${node}"
            else
                nodes="${nodes} ${node}"
            fi

            if [ ${count} -ge ${total} ]; then
                info "Done (${count}/${total})"
                break
            fi
        done

        info "Deploying '${project}' on nodes '${nodes}'"

        parallel_deploy "${project}" "${nodes}"

        info "Checking again"

        # Repeat the process...
        main "$@"
        return $?
    fi

    if [ -z "${rctl_rules}" ]; then
        debug "There are no rctl(8) rules, exiting"
        return ${EX_OK}
    fi

    info "Processing rctl(8) rules"

    local deploy=false

    for node in ${good_list}; do
        check_rctl "${project}" "${node}" "${scale_type}" "${rctl_rules}"

        errlevel=$?

        if [ ${errlevel} -eq 1 ]; then
            deploy=true
            
            warn "Project '${project}' has not passed '${scale_type}:(${rctl_rules})' on node '${node}'"

            break
        elif [ ${errlevel} -eq 2 ]; then
            continue # error.
        fi
    done

    if [ ${good_count} -ge ${max} ]; then
        info "The maximum number of good nodes has been reached (${max})."
    elif ${deploy}; then
        if [ ${bad_count} -eq 0 ]; then
            warn "Insufficient nodes to replicate the project (${bad_count})!"
            return ${EX_OK}
        fi

        info "Scaling"

        node=`printf "%s" "${bad_list}" | tr ' ' '\n' | sort -R | head -1`

        deploy "${project}" "${node}"

        if [ ${scale_time} -gt 0 ]; then
            info "Sleeping ${scale_time}"
            sleep "${scale_time}" || return $?
        fi

        info "Checking again"

        main "$@"
        return $?
    fi

    if ! ${deploy} && [ ${good_count} -gt ${min} ]; then
        warn "Resource usage appears to be decreasing, destroying nodes"

        for node in ${good_list}; do
            destroy "${project}" "${node}"

            info "Done (${good_count}/${min})"

            good_count=$((good_count-1))

            if [ ${good_count} -le ${min} ]; then
                break
            fi

            if [ ${stabilization_window} -gt 0 ]; then
                info "Sleeping ${stabilization_window}"
                sleep "${stabilization_window}" || return $?
            fi
        done

        info "Checking again"

        main "$@"
        return $?
    fi

    exit ${EX_OK}
}

check_rctl()
{
    local project
    project="$1"

    local node
    node="$2"

    local scale_type
    scale_type="$3"

    local rctl_rules
    rctl_rules="$4"

    local errlevel

    for rctl_rule in ${rctl_rules}; do
        if [ -z "${rctl_rule}" ]; then
            continue
        fi

        if ! _check_rctl_rule "${rctl_rule}"; then
            warn "${rctl_rule}: invalid rctl(8) rule syntax."
            continue
        fi

        local resource
        resource=`printf "%s" "${rctl_rule}" | cut -d= -f1`

        local value
        value=`printf "%s" "${rctl_rule}" | cut -d= -f2-`

        case "${resource}" in
            datasize|stacksize|coredumpsize|memoryuse|memorylocked|vmemoryuse|swapuse|msgqsize|shmsize|readbps|writebps)
                value=`humanize_number "${value}"`

                if [ $? -ne 0 ]; then
                    warn "${value}: invalid value for '${resource}'"
                    continue
                fi
                ;;
            cputime|maxproc|openfiles|pseudoterminals|nthr|msgqqueued|nmsgq|nsem|nsemop|nshm|wallclock|pcpu|readiops|writeiops)
                if ! checknumber "${value}"; then
                    warn "${value}: invalid number for '${resource}'."
                    continue
                fi
                ;;
            *)
                warn "${resource}: resource not found."
                continue
                ;;
        esac

        if [ ${value} -le 0 ]; then
            warn "${value}: too low number for '${resource}'."
            continue
        fi

        case "${scale_type}" in
            any-jail|any-project|average)
                scale_${scale_type} "${project}" "${node}" "${resource}" "${value}"
                
                errlevel=$?

                if [ ${errlevel} -ne 0 ]; then
                    return ${errlevel}
                fi
                ;;
            percent-jail=*|percent-project=*)
                local percent
                percent=`printf "%s" "${scale_type}" | cut -s -d= -f2-`

                scale_type=`printf "%s" "${scale_type}" | cut -s -d= -f1`

                if [ -z "${percent}" ]; then
                    warn "Invalid percent number for '${resource}'."
                    continue
                fi

                if ! checknumber "${percent}"; then
                    warn "${percent}: invalid number for '${resource}'."
                    continue
                fi

                if [ ${percent} -lt 1 -o ${percent} -gt 100 ]; then
                    warn "${percent}: invalid range for '${resource}': must be between 1 and 100."
                    continue
                fi

                scale_${scale_type} "${project}" "${node}" "${percent}" "${resource}" "${value}"

                errlevel=$?

                if [ ${errlevel} -ne 0 ]; then
                    return ${errlevel}
                fi
                ;;
        esac
    done

    return ${EX_OK}
}

scale_any-jail()
{
    local project
    project="$1"

    local node
    node="$2"

    local resource
    resource="$3"

    local value
    value="$4"

    local jails
    jails=`_get_jails "${project}" "${node}"` || return $?

    local jail
    for jail in ${jails}; do
        local errlevel

        local stat
        stat=`_get_rctl_stat "${node}" "${jail}" "${resource}"`

        errlevel=$?

        if [ ${errlevel} -ne 0 ]; then
            continue
        fi

        if [ ${stat} -ge ${value} ]; then
            debug "Comparing '${resource}' on node '${node}': current:${stat} >= limit:${value} = true"
            
            return 1
        else
            debug "Comparing '${resource}' on node '${node}': current:${stat} >= limit:${value} = false"
        fi
    done

    return 0
}

scale_any-project()
{
    local project
    project="$1"

    local node
    node="$2"

    local resource
    resource="$3"

    local value
    value="$4"

    local jails
    jails=`_get_jails "${project}" "${node}"` || return $?

    local total=0

    local jail
    for jail in ${jails}; do
        local errlevel

        local stat
        stat=`_get_rctl_stat "${node}" "${jail}" "${resource}" 2>&1`

        errlevel=$?

        if [ ${errlevel} -ne 0 ]; then
            continue
        fi

        total=$((total+stat))
    done

    if [ ${total} -ge ${value} ]; then
        debug "Comparing '${resource}' on node '${node}': current:${total} >= limit:${value} = true"

        return 1
    else
        debug "Comparing '${resource}' on node '${node}': current:${total} >= limit:${value} = false"

        return 0
    fi
}

scale_average()
{
    local project
    project="$1"

    local node
    node="$2"

    local resource
    resource="$3"

    local value
    value="$4"

    local jails
    jails=`_get_jails "${project}" "${node}"` || return $?

    local count=0
    local total=0

    local jail
    for jail in ${jails}; do
        local errlevel

        local stat
        stat=`_get_rctl_stat "${node}" "${jail}" "${resource}" 2>&1`

        errlevel=$?

        if [ ${errlevel} -ne 0 ]; then
            continue
        fi

        count=$((count+1))
        total=$((total+stat))
    done

    local result
    result=$((total / count))

    if [ ${result} -ge ${value} ]; then
        debug "Comparing '${resource}' on node '${node}': current:${result} >= limit:${value} = true"

        return 1
    else
        debug "Comparing '${resource}' on node '${node}': current:${result} >= limit:${value} = false"

        return 0
    fi
}

scale_percent-jail()
{
    local project
    project="$1"

    local node
    node="$2"

    local percent
    percent="$3"

    local resource
    resource="$4"

    local value
    value="$5"

    local jails
    jails=`_get_jails "${project}" "${node}"` || return $?

    local limit
    limit=$(((value * percent) / 100))

    local jail
    for jail in ${jails}; do
        local errlevel

        local stat
        stat=`_get_rctl_stat "${node}" "${jail}" "${resource}" 2>&1`

        errlevel=$?

        if [ ${errlevel} -ne 0 ]; then
            continue
        fi

        if [ ${stat} -ge ${limit} ]; then
            debug "Comparing '${resource}' on node '${node}': current:${stat} >= limit:${limit} = true"

            return 1
        else
            debug "Comparing '${resource}' on node '${node}': current:${stat} >= limit:${limit} = false"
        fi
    done

    return 0
}

scale_percent-project()
{
    local project
    project="$1"

    local node
    node="$2"

    local percent
    percent="$3"

    local resource
    resource="$4"

    local value
    value="$5"

    local jails
    jails=`_get_jails "${project}" "${node}"` || return $?

    local total=0

    local limit
    limit=$(((value * percent) / 100))

    local jail
    for jail in ${jails}; do
        local errlevel

        local stat
        stat=`_get_rctl_stat "${node}" "${jail}" "${resource}" 2>&1`

        errlevel=$?

        if [ ${errlevel} -ne 0 ]; then
            continue
        fi

        total=$((total+stat))
    done

    if [ ${total} -ge ${limit} ]; then
        debug "Comparing '${resource}' on node '${node}': current:${total} >= limit:${limit} = true"

        return 1
    else
        debug "Comparing '${resource}' on node '${node}': current:${total} >= limit:${limit} = false"

        return 0
    fi
}

_get_jails()
{
    local project
    project="$1"

    local node
    node="$2"

    local errlevel

    local project_info
    project_info=`run_director "${project}" "${node}" "NO" "NO" describe 2>&1`

    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        warn "Could not get information from project '${project}': ${project_info}."
        return ${EX_SOFTWARE}
    fi

    local jails
    jails=`echo -e "${project_info}" | jq -r '.services.[].jail' 2>&1`

    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        warn "Could not get jails from project '${project}': ${jails}"
        return ${EX_SOFTWARE}
    fi

    echo "${jails}"

    return ${EX_OK}
}

_get_rctl_stat()
{
    local node
    node="$1"

    local jail
    jail="$2"
    
    local resource
    resource="$3"

    local errlevel

    local current
    current=`remote_exc "${node}" "NO" "NO" appjail limits stats -epHIth -- "${jail}" "${resource}" 2>&1`

    errlevel=$?

    if [ -n "${current}" ] && [ ${errlevel} -eq 0 ]; then
        echo "${current}"
        return ${EX_OK}
    else
        warn "Could not get metric '${resource}' from jail '${jail}' on node '${node}': ${current}"
        return ${EX_SOFTWARE}
    fi
}

_check_rctl_rule()
{
    local rctl_rule
    rctl_rule="$1"

    if printf "%s" "${rctl_rule}" | grep -qEe '^[a-z]+=[0-9]+[kKmMgGtTpPeE]?$'; then
        return 0
    else
        return 1
    fi
}

usage()
{
    err "usage: ${DEPLOY_NAME}: [-m <min>] [-M <max>] [-r <rctl-rules>] [-S <number>]"
    err "               [-t <scale-type>] [-T <number>]"
    exit ${EX_USAGE}
}

main "$@"
