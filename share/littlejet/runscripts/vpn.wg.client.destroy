#!/bin/sh
#
# Copyright (c) 2024, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DEPLOY_NAME="vpn.wg.client.destroy"

main()
{
    local lib_subr
    lib_subr="${LITTLEJET_LIB_SUBR}"

    if [ -z "${lib_subr}" ]; then
        echo "LITTLEJET_LIB_SUBR: environment variable hasn't been defined." >&2
        exit 78 # EX_CONFIG
    fi

    if [ ! -f "${lib_subr}" ]; then
        echo "${lib_subr}: library cannot be found." >&2
        exit 66 # EX_NOINPUT
    fi
    
    . "${lib_subr}"

    load_config

    setname "${DEPLOY_NAME}"

    checkdependency jq

    local project
    project="${LITTLEJET_PROJECT}"

    if [ -z "${project}" ]; then
        err "LITTLEJET_PROJECT: environment variable hasn't been defined."
        exit ${EX_CONFIG}
    fi

    if ! checkprojectname "${project}"; then
        err "${project}: invalid project name."
        exit ${EX_DATAERR}
    fi

    if ! checkproject "${project}"; then
        err "${project}: project cannot be found."
        exit ${EX_NOINPUT}
    fi

    atexit_init
    atexit_add ". \"${lib_subr}\""
    atexit_add "setname \"${DEPLOY_NAME}\""
    atexit_add "load_config"

    local _o
    local jail="littlejet-server-wg"
    local node=
    local suffix="-wg"
    
    while getopts ":j:n:s:" _o; do
        case "${_o}" in
            j)
                jail="${OPTARG}"
                ;;
            n)
                node="${OPTARG}"
                ;;
            s)
                suffix="${OPTARG}"
                ;;
            *)
                usage
                ;;
        esac
    done
    shift $((OPTIND-1))

    local vpn
    vpn="$1"

    if [ -z "${vpn}" ]; then
        usage
    fi

    shift

    if ! checknodename "${vpn}"; then
        err "${vpn}: invalid node name."
        exit ${EX_NOINPUT}
    fi

    local errlevel

    local output
    output=`testnode "${vpn}" 2>&1`
        
    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        err "Could not destroy VPN client due to an error on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    output=`remote_exc "${vpn}" "NO" "NO" appjail status -q -- "\"${jail}\"" 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        # pass
    elif [ ${errlevel} -eq 1 ]; then
        warn "VPN server on jail '${jail}', node '${vpn}', hasn't been started"

        remote_exc "${vpn}" "YES" "NO" appjail start -- "\"${jail}\""
    elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
        err "Could not destroy VPN client because the VPN server doesn't exist"
        exit ${EX_NOINPUT}
    else
        err "Could not check status of jail '${jail}' on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    output=`remote_exc "${vpn}" "NO" "NO" appjail cmd jexec "\"${jail}\"" test -f /.done 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        # pass
    elif [ ${errlevel} -eq 1 ]; then
        err "The VPN server on jail '${jail}' on node '${vpn}' does not appear to be healthy, make sure you deploy it correctly."
        exit ${EX_SOFTWARE}
    else
        err "Failed to check the status of jail '${jail}' on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    local allow_exclude=true
    local nodes

    if [ -n "${node}" ]; then
        if ! checknodename "${node}"; then
            err "${node}: invalid node name."
            exit ${EX_NOINPUT}
        fi

        if ! checknode "${node}"; then
            err "${node}: node cannot be found."
            exit ${EX_NOINPUT}
        fi
        
        nodes="${node}"
        allow_exclude=false
    else
        nodes=`jet get-nodes "${project}"` || exit $?

        if [ -z "${nodes}" ]; then
            exit ${EX_CANTCREAT}
        fi
    fi

    for node in ${nodes}; do
        if ${allow_exclude}; then
            local exclude
            exclude=`jet get-label "${project}" "${node}" vpn.wg.client.exclude 2> /dev/null`

            if [ -n "${exclude}" ]; then
                debug "Node '${node}' was excluded"
                continue
            fi
        fi

        local errlevel

        local output
        output=`run_director "${project}" "${node}" "NO" "NO" check 2>&1`

        errlevel=$?

        if [ ${errlevel} -eq 0 ]; then
            # pass
        elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
            warn "${project}: project not found"
            continue
        else
            warn "Project '${project}' has an error: ${output}"
            continue
        fi

        local project_info
        project_info=`run_director "${project}" "${node}" "YES" "NO" describe 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error getting information about project '${project}' on node '${node}': ${project_info}"
            continue
        fi

        local state
        state=`echo -e "${project_info}" | safe_exc jq -r .state 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error parsing information about project '${project}' on node '${node}': ${state}"
            continue
        fi

        debug "Project state is '${state}'"

        if ! [ "${state}" = "DONE" -o "${state}" = "DESTROYING" ]; then
            warn "State (${state}) is different than expected"
            continue
        fi

        local services_status
        services_status=`echo -e "${project_info}" | safe_exc jq -r '.services.[].status' 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error parsing information about project '${project}' on node '${node}': ${services_status}"
            continue
        fi

        local service_index=0

        local service_status
        for service_status in ${services_status}; do
            local service_name
            service_name=`echo -e "${project_info}" | safe_exc jq -r ".services.[${service_index}].name" 2>&1`

            if [ $? -ne 0 ]; then
                warn "Error parsing information about project '${project}' on node '${node}': ${service_name}"
                service_index=$((service_index+1))
                continue
            fi

            local peerid
            peerid="peer://${node}/${project}/${service_name}"

            remote_exc "${vpn}" "NO" "NO" \
                appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh check "${peerid}"

            errlevel=$?

            if [ ${errlevel} -eq ${EX_OK} ]; then
                warn "Destroying peer '${peerid}'"

                remote_exc "${vpn}" "NO" "NO" \
                    appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh del "${peerid}"

                if [ $? -ne 0 ]; then
                    warn "Error destroying peer '${peerid}'"
                fi
            elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                # pass
            else
                warn "Error checking for existence of peer '${peerid}'"
                service_index=$((service_index+1))
                continue
            fi

            local vpn_jail
            vpn_jail="${project}-${service_name}${suffix}"
            vpn_jail=`printf "%s" "${vpn_jail}" | sed -Ee 's/\./_0X2E_/g'`

            output=`remote_exc "${node}" "NO" "NO" appjail status -q -- "\"${vpn_jail}\"" 2>&1`

            errlevel=$?

            if [ ${errlevel} -eq 0 -o ${errlevel} -eq 1 ]; then
                if [ ${errlevel} -eq 0 ]; then
                    warn "Stopping VPN jail '${vpn_jail}' on peer '${peerid}'"

                    remote_exc "${node}" "NO" "NO" \
                        appjail stop -- "\"${vpn_jail}\""
                fi

                warn "Destroying VPN jail '${vpn_jail}' on peer '${peerid}'"

                remote_exc "${node}" "NO" "NO" \
                    appjail jail destroy -Rf -- "\"${vpn_jail}\""

                if [ $? -ne 0 ]; then
                    warn "Error destroying VPN client on peer '${peerid}'"
                fi
            elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                # pass
            else
                warn "Could not check status of jail '${jail}' on node '${vpn_jail}': ${output}"
            fi

            service_index=$((service_index+1))
        done
    done

    exit ${EX_OK}
}

usage()
{
	err "usage: ${DEPLOY_NAME} [-j <jail>] [-n <node>] [-s <suffix>] <vpn>"
	exit ${EX_USAGE}
}

main "$@"
