#!/bin/sh
#
# Copyright (c) 2024, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DEPLOY_NAME="vpn.wg.client"

main()
{
    local lib_subr
    lib_subr="${LITTLEJET_LIB_SUBR}"

    if [ -z "${lib_subr}" ]; then
        echo "LITTLEJET_LIB_SUBR: environment variable hasn't been defined." >&2
        exit 78 # EX_CONFIG
    fi

    if [ ! -f "${lib_subr}" ]; then
        echo "${lib_subr}: library cannot be found." >&2
        exit 66 # EX_NOINPUT
    fi
    
    . "${lib_subr}"

    load_config

    setname "${DEPLOY_NAME}"

    checkdependency jq

    local project
    project="${LITTLEJET_PROJECT}"

    if [ -z "${project}" ]; then
        err "LITTLEJET_PROJECT: environment variable hasn't been defined."
        exit ${EX_CONFIG}
    fi

    if ! checkprojectname "${project}"; then
        err "${project}: invalid project name."
        exit ${EX_DATAERR}
    fi

    if ! checkproject "${project}"; then
        err "${project}: project cannot be found."
        exit ${EX_NOINPUT}
    fi

    atexit_init
    atexit_add ". \"${lib_subr}\""
    atexit_add "setname \"${DEPLOY_NAME}\""
    atexit_add "load_config"

    local _o
    local jail="littlejet-server-wg"
    local node=
    local suffix="-wg"
    local virtual_network=
    
    while getopts ":j:n:s:v:" _o; do
        case "${_o}" in
            j)
                jail="${OPTARG}"
                ;;
            n)
                node="${OPTARG}"
                ;;
            s)
                suffix="${OPTARG}"
                ;;
            v)
                virtual_network="${OPTARG}"
                ;;
            *)
                usage
                ;;
        esac
    done
    shift $((OPTIND-1))

    local vpn
    vpn="$1"

    if [ -z "${vpn}" ]; then
        usage
    fi

    shift

    if ! checknodename "${vpn}"; then
        err "${vpn}: invalid node name."
        exit ${EX_NOINPUT}
    fi

    local errlevel

    local output
    output=`testnode "${vpn}" 2>&1`
        
    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        err "Could not deploy VPN client due to an error on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    output=`remote_exc "${vpn}" "NO" "NO" appjail status -q -- "\"${jail}\"" 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        # pass
    elif [ ${errlevel} -eq 1 ]; then
        warn "VPN server on jail '${jail}', node '${vpn}', hasn't been started"

        remote_exc "${vpn}" "YES" "NO" appjail start -- "\"${jail}\""
    elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
        err "VPN server doesn't exist, use 'vpn.wg.server' to deploy it."
        exit ${EX_NOINPUT}
    else
        err "Could not check status of jail '${jail}' on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    output=`remote_exc "${vpn}" "NO" "NO" appjail cmd jexec "\"${jail}\"" test -f /.done 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        # pass
    elif [ ${errlevel} -eq 1 ]; then
        err "The VPN server on jail '${jail}' on node '${vpn}' does not appear to be healthy, make sure you deploy it correctly."
        exit ${EX_SOFTWARE}
    else
        err "Failed to check the status of jail '${jail}' on node '${vpn}': ${output}"
        exit ${EX_SOFTWARE}
    fi

    local network_address
    network_address=`remote_exc "${vpn}" "NO" "NO" appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh get-network-addr 2>&1`

    if [ $? -ne 0 ]; then
        err "Failed to get network address on node '${vpn}': ${network_address}"
        exit ${EX_SOFTWARE}
    fi

    local allow_exclude=true
    local nodes

    if [ -n "${node}" ]; then
        if ! checknodename "${node}"; then
            err "${node}: invalid node name."
            exit ${EX_NOINPUT}
        fi

        if ! checknode "${node}"; then
            err "${node}: node cannot be found."
            exit ${EX_NOINPUT}
        fi
        
        nodes="${node}"
        allow_exclude=false
    else
        nodes=`jet get-nodes "${project}"` || exit $?

        if [ -z "${nodes}" ]; then
            exit ${EX_CANTCREAT}
        fi
    fi

    for node in ${nodes}; do
        if ${allow_exclude}; then
            local exclude
            exclude=`jet get-label "${project}" "${node}" vpn.wg.client.exclude 2> /dev/null`

            if [ -n "${exclude}" ]; then
                debug "Node '${node}' was excluded"
                continue
            fi
        fi

        local errlevel

        local output
        output=`run_director "${project}" "${node}" "NO" "NO" check 2>&1`

        errlevel=$?

        if [ ${errlevel} -eq 0 ]; then
            # pass
        elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
            warn "${project}: project not found"
            continue
        else
            warn "Project '${project}' has an error: ${output}"
            continue
        fi

        local project_info
        project_info=`run_director "${project}" "${node}" "YES" "NO" describe 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error getting information about project '${project}' on node '${node}': ${project_info}"
            continue
        fi

        local state
        state=`echo -e "${project_info}" | safe_exc jq -r .state 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error parsing information about project '${project}' on node '${node}': ${state}"
            continue
        fi

        debug "Project state is '${state}'"

        if ! [ "${state}" = "DONE" -o "${state}" = "DESTROYING" ]; then
            warn "State (${state}) is different than expected"
            continue
        fi

        local services_status
        services_status=`echo -e "${project_info}" | safe_exc jq -r '.services.[].status' 2>&1`

        if [ $? -ne 0 ]; then
            warn "Error parsing information about project '${project}' on node '${node}': ${services_status}"
            continue
        fi

        local service_index=0

        local service_status
        for service_status in ${services_status}; do
            local service_name
            service_name=`echo -e "${project_info}" | safe_exc jq -r ".services.[${service_index}].name" 2>&1`

            if [ $? -ne 0 ]; then
                warn "Error parsing information about project '${project}' on node '${node}': ${service_name}"
                service_index=$((service_index+1))
                continue
            fi

            local peerid
            peerid="peer://${node}/${project}/${service_name}"

            local is_created=false

            remote_exc "${vpn}" "NO" "NO" \
                appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh check "${peerid}"

            errlevel=$?

            if [ ${errlevel} -eq ${EX_OK} ]; then
                is_created=true
            elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                is_created=false
            else
                warn "Error checking for existence of peer '${peerid}'"
                service_index=$((service_index+1))
                continue
            fi

            local vpn_jail
            vpn_jail="${project}-${service_name}${suffix}"
            vpn_jail=`printf "%s" "${vpn_jail}" | sed -Ee 's/\./_0X2E_/g'`

            if [ ${service_status} -eq 0 -o "${service_status}" -eq 1 ]; then
                if ! ${is_created}; then
                    remote_exc "${vpn}" "NO" "NO" \
                        appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh add "${peerid}"

                    if [ $? -ne 0 ]; then
                        warn "Error creating peer '${peerid}'"
                        service_index=$((service_index+1))
                        continue
                    fi
                fi
            elif [ ${service_status} -eq ${EX_NOINPUT} ]; then
                warn "Service '${service_name}' hasn't been created"
                
                if ${is_created}; then
                    warn "Destroying peer '${peerid}'"

                    remote_exc "${vpn}" "NO" "NO" \
                        appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh del "${peerid}"

                    if [ $? -ne 0 ]; then
                        warn "Error destroying peer '${peerid}'"
                    fi
                fi

                output=`remote_exc "${node}" "NO" "NO" appjail status -q -- "\"${vpn_jail}\"" 2>&1`

                errlevel=$?

                if [ ${errlevel} -eq 0 -o ${errlevel} -eq 1 ]; then
                    if [ ${errlevel} -eq 0 ]; then
                        warn "Stopping VPN jail '${vpn_jail}' on peer '${peerid}'"

                        remote_exc "${node}" "NO" "NO" \
                            appjail stop -- "\"${vpn_jail}\""
                    fi

                    warn "Destroying VPN client on peer '${peerid}'"

                    remote_exc "${node}" "NO" "NO" \
                        appjail jail destroy -Rf -- "\"${vpn_jail}\""

                    if [ $? -ne 0 ]; then
                        warn "Error destroying VPN client on peer '${peerid}'"
                    fi
                elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                    # pass
                else
                    warn "Could not check status of jail '${jail}' on node '${vpn_jail}': ${output}"
                fi

                service_index=$((service_index+1))
                continue
            else
                warn "Service '${service_name}' has a different status (${service_status}) than expected"
                service_index=$((service_index+1))
                continue
            fi

            local service_jail
            service_jail=`echo -e "${project_info}" | safe_exc jq -r ".services.[${service_index}].jail" 2>&1`

            if [ $? -ne 0 ]; then
                warn "Error parsing information about project '${project}' on node '${node}': ${service_jail}"
                service_index=$((service_index+1))
                continue
            fi

            local labels
            labels="from.port include.me proto target.port"

            local label_from_port=
            local label_include_me=
            local label_proto="tcp"
            local label_target_port=

            local label
            for label in ${labels}; do
                label="vpn.wg.client.${label}"

                local value
                value=`remote_exc "${node}" "NO" "NO" appjail label get -I -l "${label}" -- "${service_jail}" value 2>&1`

                errlevel=$?

                if [ ${errlevel} -eq 0 ]; then
                    # pass
                elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                    continue
                else
                    warn "Error getting label '${label}' from service '${service_name}': ${value}"
                    continue
                fi

                case "${label}" in
                    *.from.port)
                        setvar "label_from_port" "${value}"
                        ;;
                    *.include.me)
                        setvar "label_include_me" "${value}"
                        ;;
                    *.proto)
                        setvar "label_proto" "${value}"
                        ;;
                    *.target.port)
                        setvar "label_target_port" "${value}"
                        ;;
                esac
            done

            if [ -z "${label_include_me}" ]; then
                debug "Service '${service_name}' doesn't have the label 'vpn.wg.client.include.me'"
                service_index=$((service_index+1))
                continue
            fi

            if [ -z "${label_from_port}" ]; then
                warn "Service '${service_name}' wants to be included in the list but has not defined an external port"
                service_index=$((service_index+1))
                continue
            fi

            if ! checknumber "${label_from_port}" || ! checkport "${label_from_port}"; then
                want "Service '${service_name}' has an invalid external port: ${label_from_port}"
                service_index=$((service_index+1))
                continue
            fi

            if [ -n "${label_target_port}" ]; then
                if ! checknumber "${label_target_port}" || ! checkport "${label_target_port}"; then
                    want "Service '${service_name}' has an invalid target port: ${label_target_port}"
                    service_index=$((service_index+1))
                    continue
                fi
            else
                label_target_port="${label_from_port}"
            fi

            case "${label_proto}" in
                tcp|udp)
                    ;;
                *)
                    warn "Service '${service_name}' has an invalid protocol: ${label_proto}"
                    service_index=$((service_index+1))
                    continue
                    ;;
            esac

            set --
            set -- --wg_network_address "${network_address}"
            set -- "$@" --wg_jail "${service_jail}"
            set -- "$@" --wg_from_port "${label_from_port}"
            set -- "$@" --wg_target_port "${label_target_port}"
            set -- "$@" --wg_proto "${label_proto}"

            if [ -n "${virtual_network}" ]; then
                set -- "$@" --wg_virtualnet "${virtual_network}"
            fi

            output=`remote_exc "${node}" "NO" "NO" appjail status -q -- "\"${vpn_jail}\"" 2>&1`

            errlevel=$?

            local deploy_vpn_client=false

            if [ ${errlevel} -eq 0 ]; then
                # pass
            elif [ ${errlevel} -eq 1 ]; then
                warn "VPN client on jail '${vpn_jail}', node '${node}', hasn't been started"

                remote_exc "${node}" "NO" "NO" appjail start -- "\"${vpn_jail}\""

                if [ $? -ne 0 ]; then
                    warn "Error starting jail '${vpn_jail}'"
                    service_index=$((service_index+1))
                    continue
                fi

                output=`remote_exc "${node}" "NO" "NO" appjail cmd jexec "\"${vpn_jail}\"" test -f /.done 2>&1`

                errlevel=$?

                if [ ${errlevel} -eq 0 ]; then
                    # pass
                elif [ ${errlevel} -eq 1 ]; then
                    warn "VPN client on jail '${vpn_jail}' on node '${node}' does not appear to be healthy, re-deploying"

                    deploy_vpn_client=true
                else
                    warn "Failed to check the status of jail '${vpn_jail}' on node '${node}': ${output}"
                    service_index=$((service_index+1))
                    continue
                fi
            elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
                info "Creating VPN client on jail '${vpn_jail}', node '${node}'"

                deploy_vpn_client=true
            else
                warn "Could not check status of jail '${jail}' on node '${vpn_jail}': ${output}"
                service_index=$((service_index+1))
                continue
            fi

            if ${deploy_vpn_client}; then
                if ! deploy_vpn_client "${node}" "${peerid}" "${jail}" "${vpn}" "${vpn_jail}" "$@"; then
                    service_index=$((service_index+1))
                    continue
                fi
            fi

            local current_network_ip4
            current_network_ip4=`remote_exc "${node}" "NO" "NO" appjail jail get -I -- "\"${service_jail}\"" network_ip4 2>&1`

            if [ $? -eq 0 ]; then
                if [ -z "${current_network_ip4}" ]; then
                    warn "Service '${service_name}' doesn't have an IPv4 address assigned"
                    service_index=$((service_index+1))
                    continue
                fi

                local old_network_ip4
                old_network_ip4=`remote_exc "${node}" "NO" "NO" appjail cmd jexec "\"${vpn_jail}\"" head -1 -- "/.jail.address" 2>&1`

                if [ $? -ne 0 ]; then
                    warn "Error getting IPv4 from VPN client '${vpn_jail}': ${old_network_ip4}"
                    service_index=$((service_index+1))
                    continue
                fi

                if [ "${current_network_ip4}" != "${old_network_ip4}" ]; then
                    info "Updating IPv4 on VPN client '${vpn_jail}': ${current_network_ip4} != ${old_network_ip4}"

                    remote_exc "${node}" "NO" "NO" \
                        appjail cmd jexec "\"${vpn_jail}\"" sh -c "\"echo -n ${current_network_ip4} > /.jail.address\""

                    if [ $? -ne 0 ]; then
                        warn "Error updating IPv4 on VPN client '${vpn_jail}'"
                        service_index=$((service_index+1))
                        continue
                    fi

                    remote_exc "${node}" "NO" "NO" \
                        appjail cmd jexec "\"${vpn_jail}\"" service pf reload

                    if [ $? -ne 0 ]; then
                        warn "Error reloading rules in pf from VPN client '${vpn_jail}'"
                    fi
                fi
            else
                warn "Error getting IPv4 from service '${service_name}': ${current_network_ip4}"
            fi

            service_index=$((service_index+1))
        done
    done

    exit ${EX_OK}
}

deploy_vpn_client()
{
    local node
    node="$1"

    local peerid
    peerid="$2"

    local jail
    jail="$3"

    local vpn
    vpn="$4"

    local vpn_jail
    vpn_jail="$5"

    shift 5

    local local_wg_conf
    local_wg_conf=`tempfile`

    if [ $? -ne 0 ]; then
        warn "Error creating a temporary file locally: ${local_wg_conf}"
        return 1
    fi

    local wg_conf
    wg_conf=`remote_exc "${node}" "NO" "NO" mktemp -t littlejet-vpn.wg.client 2>&1`

    if [ $? -ne 0 ]; then
        warn "Error while remotely creating a temporary file: ${wg_conf}"
        return 1
    fi

    remote_exc "${vpn}" "NO" "NO" \
        appjail cmd jexec "\"${jail}\"" /scripts/run-with-lock.sh show "${peerid}" > "${local_wg_conf}"

    if [ $? -ne 0 ]; then
        warn "Error writing locally the WireGuard configuration file of peer '${peerid}'"
        remote_exc "${node}" "NO" "NO" rm -f -- "\"${wg_conf}\"" 2> /dev/null
        return 1
    fi
    
    (mirror "${local_wg_conf}" "${node}:${wg_conf}")

    if [ $? -ne 0 ]; then
        warn "Error uploading the WireGuard configuration file to peer '${peerid}'"
        remote_exc "${node}" "NO" "NO" rm -f -- "\"${wg_conf}\"" 2> /dev/null
        return 1
    fi

    atexit_add "removefile \"${local_wg_conf}\""

    removefile "${local_wg_conf}"

    set -- "$@" --wg_conf "\"${wg_conf}\""

    remote_exc "${node}" "NO" "NO" \
        appjail makejail \
            -j "\"${vpn_jail}\"" \
            -f "\"gh+DtxdF/LittleJet-wg-makejail --file client.makejail\"" \
            -- "$@"

    if [ $? -ne 0 ]; then
        warn "Error deploying VPN client on peer '${peerid}'"
        remote_exc "${node}" "NO" "NO" rm -f -- "\"${wg_conf}\"" 2> /dev/null
        return 1
    fi

    remote_exc "${node}" "NO" "NO" rm -f -- "\"${wg_conf}\"" 2> /dev/null

    return 0
}

usage()
{
	err "usage: ${DEPLOY_NAME} [-j <jail>] [-n <node>] [-s <suffix>] [-v <virtual-network>] <vpn>"
	exit ${EX_USAGE}
}

main "$@"
