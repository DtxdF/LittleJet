#
# Copyright (c) 2024, Jes√∫s Daniel Colmenares Oviedo <DtxdF@disroot.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -T

# Default name.
NAME="main"

# Colors.
COLOR_DEFAULT="\033[39;49m"
COLOR_RED="\033[0;31m"
COLOR_LIGHT_YELLOW="\033[0;93m"
COLOR_LIGHT_BLUE="\033[0;94m"
COLOR_GRAY="\033[0;90m"

# See sysexits(3).
EX_OK=0
EX_USAGE=64
EX_DATAERR=65
EX_NOINPUT=66
EX_NOUSER=67
EX_NOHOST=68
EX_UNAVAILABLE=69
EX_SOFTWARE=70
EX_OSERR=71
EX_OSFILE=72
EX_CANTCREAT=73
EX_IOERR=74
EX_TEMPFAIL=75
EX_PROTOCOL=76
EX_NOPERM=77
EX_CONFIG=78

# usage:
#   setname <name>
# args:
#   <name>: Module name.
# description:
#   The name is displayed for each execution of logging functions, such as debug,
#   info, err, and warn.
#
setname()
{
    NAME="$1"
}

# usage:
#   checkdependency <program-name>
# description:
#   Check if a program can be located using the PATH environment variable and if not
#   it exists with exit status EX_UNAVAILABLE.
#
checkdependency()
{
    if ! which -s "$1"; then
        err "$1: dependency required but cannot be found."
        exit ${EX_UNAVAILABLE}
    fi
}

# usage:
#   checklabelname <label-name>
# description:
#   Check if a label is valid..
#
checklabelname()
{
    if printf "%s" "$1" | grep -qEe '^[a-z][a-z0-9]*((\.|-)?[a-z][a-z0-9]*)*$'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checklabel <project> <node> <label>
# args:
#   <project>: Project where the node is located to find the label.
#   <node>: Node where the label can be located.
#   <label>: Label name.
# description:
#   Check if a label exists.
#
checklabel()
{
    if [ $# -lt 3 ]; then
        err "usage: checklabel <project> <node> <label>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local node
    node="$2"

    local label
    label="$3"

    local labelfile
    labelfile="${NODESDIR}/${project}/${node}/labels/${label}"

    if [ -f "${labelfile}" ]; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checklabelsyntax <label>=<value>
# description:
#   Check if a label is valid if it matches a specific syntax, which includes its value.
#
checklabelsyntax()
{
    if printf "%s" "$1" | grep -qEe '^[a-z][a-z0-9]*((\.|-)?[a-z][a-z0-9]*)*=.+$'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checkscriptname <script-name>
# description:
#   Check if a script name is valid.
#
checkscriptname()
{
    ! checkisdir "$1"
}

# usage:
#   getscript <script-name>
# description:
#   Get a path of a script.
getscript()
{
    if [ $# -lt 1 ]; then
        err "usage: getscript <script-name>"
        exit ${EX_USAGE}
    fi

    local script_name
    script_name="$1"

    local dir
    for dir in ${RUNSCRIPTS}; do
        if [ ! -d "${dir}" ]; then
            debug "${dir}: it's not a directory or doesn't exist."
            continue
        fi

        local pathname
        pathname="${dir}/${script_name}"

        if [ ! -f "${pathname}" ]; then
            continue
        fi

        if [ ! -f "${pathname}" ]; then
            warn "${script_name}: it doesn't seem to have the execute bit permission. Ignoring ..."
            continue
        fi

        printf "%s\n" "${pathname}"
        return 0
    done

    return 1
}

# usage:
#   checknodename <node-name>
# description:
#   Check if a node name is valid.
#
checknodename()
{
    if printf "%s" "$1" | grep -qEe '^[a-zA-Z0-9._@-]+'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checkisdir <directory>
# description:
#   Check if a value contains a / character.
#
checkisdir()
{
    if printf "%s" "$1" | grep -qEe '/'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checkprojectname <project-name>
# description:
#   Check if a project name is valid.
#
checkprojectname()
{
    if printf "%s" "$1" | grep -qEe '^[a-zA-Z0-9._-]+$'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checkyesno <name> <value>
# args:
#   <name>: In case of an incorrect value, it displays a warning with its name, so that it
#           works as a hint.
#   <value>: Value to check.
# description:
#   Checks whether a value is YES or NO regardless of whether it is uppercase or
#   lowercase.
#
checkyesno()
{
    case "$2" in
        [Tt][Rr][Uu][Ee]|[Yy][Ee][Ss]|[Oo][Nn]|1) return 0 ;;
        [Ff][Aa][Ll][Ss][Ee]|[Nn][Oo]|[Oo][Ff][Ff]|0) return 1 ;;
        *) warn "$1 is not set properly."; return 2 ;;
    esac
}

# usage:
#   checkproject <project>
# description:
#   Check if a project exists.
#
checkproject()
{
    if [ $# -lt 1 ]; then
        err "usage: checkproject <project>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local projectdir
    projectdir="${PROJECTSDIR}/${project}"

    if [ -d "${projectdir}" ]; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checknode <project> <node>
# args:
#   <project>: Project where the node can be located.
#   <node>: Node name.
# description:
#   Check if a node exists.
#
checknode()
{
    if [ $# -lt 2 ]; then
        err "usage: checknode <project> <node>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local node
    node="$2"

    local nodedir
    nodedir="${NODESDIR}/${project}/${node}"

    if [ -d "${nodedir}" ]; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checkprojecthealth <project> <node>
# args:
#   <project>: Project name to check.
#   <node>: Check the project on this node.
# description:
#   Checks if a project exists, has a status of 'DONE', has all jails with a status
#   of 0, none of its jails are dirty, and has all healthcheckers with a status other
#   than 'failing' or 'unhealthy'.
#
#   Returns 0 when all checks are successful, 1 when they are not, and 2 when there
#   is an error.
#
checkprojecthealth()
{
    if [ $# -lt 2 ]; then
        err "usage: checkprojecthealth <project> <node>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local node
    node="$2"

    local errlevel

    local errmsg
    errmsg=`run_director "${project}" "${node}" "NO" "NO" check 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        local project_info
        project_info=`run_director "${project}" "${node}" "YES" "NO" describe` || return $?

        local state
        state=`echo -e "${project_info}" | safe_exc jq -r .state` || return $?

        if [ "${state}" != "DONE" ]; then
            warn "Project state is '${state}'"

            return 1
        fi

        local service_index=0

        local services
        services=`echo -e "${project_info}" | safe_exc jq -r '.services'` || return $?

        local services_length
        services_length=`echo -e "${services}" | safe_exc jq -r length` || return $?

        while [ ${service_index} -lt ${services_length} ]; do
            local service
            service=`echo -e "${services}" | safe_exc jq -r ".[${service_index}]"` || return $?

            local service_status
            service_status=`echo -e "${service}" | safe_exc jq -r '.status'` || return $?

            local service_name
            service_name=`echo -e "${service}" | safe_exc jq -r '.name'` || return $?

            if [ "${service_status}" != 0 ]; then
                warn "Service '${service_name}' has an unexpected status '${service_status}'"

                return 1
            fi

            local service_jail
            service_jail=`echo -e "${service}" | safe_exc jq -r '.jail'` || return $?

            local is_dirty
            is_dirty=`remote_exc "${node}" "NO" "NO" appjail jail get -I -- "${service_jail}" dirty 2>&1`

            if [ $? -ne 0 ]; then
                warn "Error checking status of jail '${service_jail}': ${is_dirty}"

                return 2
            fi

            if [ ${is_dirty} -eq 1 ]; then
                warn "Jail '${service_jail}' is dirty"

                return 1
            fi

            local healthcheckers_status
            healthcheckers_status=`remote_exc "${node}" "NO" "NO" appjail healthcheck list -epHIt -- "${service_jail}" status 2>&1`

            if [ $? -ne 0 ]; then
                warn "Error checking status of healthcheckers of jail '${service_jail}': ${healthcheckers_status}"

                return 2
            fi

            local healthchecker_status
            for healthchecker_status in ${healthcheckers_status}; do
                case "${healthchecker_status}" in
                    failing|unhealthy) 
                        warn "Service '${service_name}' has a healthchecker with an unexpected status '${healthchecker_status}'"

                        return 1
                        ;;
                esac
            done

            service_index=$((service_index+1))
        done

        return 0
    elif [ ${errlevel} -eq ${EX_NOINPUT} ]; then
        warn "Project '${project}' not found."

        return 1
    else
        warn "Error checking status of project '${project}': ${errmsg}"

        return 2
    fi
}

# usage:
#   checkport <port>
# description:
#   Check if in a range between 1 and 65535.
#
checkport()
{
    if [ $# -lt 1 ]; then
        err "usage: checkport <port>"
        exit ${EX_USAGE}
    fi

    local port
    port="$1"

    if [ ${port} -lt 1 -o ${port} -gt 65535 ]; then
        return 1
    else
        return 0
    fi
}

# usage:
#   safe_exc <command> [<args> ...]
# description:
#   Executes a command and exits if it returns a status other than 0. It needs to
#   place the output in a buffer before displaying it and if an error occurs, the
#   err() function is used to display the output.
#
safe_exc()
{
    local errlevel
    local output

    debug "Executing '$*'"

    output=`"$@" 2>&1`

    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        err "${output}"
        exit ${errlevel}
    fi

    if [ -n "${output}" ]; then
        printf "%s\n" "${output}"
    fi

    return ${errlevel}
}

# usage:
#   debug <string> ...
# description:
#   If DEBUG is set to YES, displays a message using the debug level.
#
debug()
{
    if checkyesno "DEBUG" "${DEBUG}"; then
        stderr "[${COLOR_GRAY} debug${COLOR_DEFAULT} ] :: <${COLOR_GRAY} ${NAME} ${COLOR_DEFAULT}> $*"
    fi
}

# usage:
#   info <string> ...
# description:
#   Display a message using the info level.
#
info()
{
    stderr "[${COLOR_LIGHT_BLUE} info ${COLOR_DEFAULT} ] :: <${COLOR_LIGHT_BLUE} ${NAME} ${COLOR_DEFAULT}> $*"
}

# usage:
#   err <string> ...
# description:
#   Display a message using the err level.
#
err()
{
    stderr "[${COLOR_RED} error${COLOR_DEFAULT} ] :: <${COLOR_RED} ${NAME} ${COLOR_DEFAULT}> $*"
}

# usage:
#   warn <string> ...
# description:
#   Display a message using the warn level.
#
warn()
{
    stderr "[${COLOR_LIGHT_YELLOW} warn ${COLOR_DEFAULT} ] :: <${COLOR_LIGHT_YELLOW} ${NAME} ${COLOR_DEFAULT}> $*"
}

# usage:
#   stdout <string> ...
# description:
#   Display a message via stdout.
#
stdout()
{
    print "$*"
}

# usage:
#   stderr <string> ...
# description:
#   Display a message via stderr.
#
stderr()
{
    print "$*" >&2
}

# usage:
#   print <string> ...
# description:
#   Display a message via print.
#
print()
{
    echo -e "$*"
}

# usage:
#   remote_exc <node> <use-safe_exc> <dirty-output> <args> ...
# args:
#   <node>: Node to connect to and execute the command.
#   <use-safe_exc>: If YES, use the safe_exc() function to execute the command.
#   <dirty-output>: If NO, use sansi(1) to remove those control characters.
#   <args>: Command and its arguments.
# description:
#   Remotely execute a command on a node.
#
remote_exc()
{
    if [ $# -lt 3 ]; then
        err "usage: remote_exc <node> [YES|NO] [YES|NO] [<args> ...]"
        exit ${EX_USAGE}
    fi

    checkdependency sansi

    local node
    node="$1"

    local use_safe_exc
    use_safe_exc="$2"

    local safe_exc_cmd
    safe_exc_cmd=

    if checkyesno "use_safe_exc" "${use_safe_exc}"; then
        safe_exc_cmd="safe_exc"
    fi

    local dirty
    dirty="$3"

    shift 3

    local be_dirty=false

    if checkyesno "dirty" "${dirty}"; then
        be_dirty=true
    fi

    if [ ! -d "${SOCKETSDIR}" ]; then
        safe_exc mkdir -p -- "${SOCKETSDIR}"
    fi

    if ${be_dirty}; then
        ${safe_exc_cmd} ssh -t \
            -o LogLevel="${SSH_LOGLEVEL}" \
            -o BatchMode=yes \
            -o ControlMaster=auto \
            -o ControlPath="${SOCKETSDIR}/${CONTROLPATH}" \
            -o ControlPersist="${CONTROLPERSIST}" \
                -- "${node}" "$@"

        return $?
    else
        local errlevel

        local buff
        buff=`${safe_exc_cmd} ssh -t -o LogLevel="${SSH_LOGLEVEL}" -o BatchMode=yes -o ControlMaster=auto -o ControlPath="${SOCKETSDIR}/${CONTROLPATH}" -o ControlPersist="${CONTROLPERSIST}" -- "${node}" "$@"`

        errlevel=$?

        if checkyesno "use_safe_exc" "${use_safe_exc}" && [ ${errlevel} -ne 0 ]; then
            exit ${errlevel}
        fi

        if [ -n "${buff}" ]; then
            printf "%s\n" "${buff}" | sansi
        fi

        return ${errlevel}
    fi
}

# usage:
#   deploy <project> <node>
# args:
#   <project>: Project to deploy.
#   <node>: Node to the deploy the project.
# description:
#   Deploy a project to a specific node. This function performs basic checks with
#   checkprojecthealth() to decide if the project needs to be destroyed before
#   redeploying. If the project has a status other than 'DONE', has a jail with a
#   status other than 0, or even fails the basic project health check, it will be
#   destroyed before deployment. Of course, the project will be deployed if it does
#   not exist.
#
deploy()
{
    if [ $# -lt 2 ]; then
        err "usage: deploy <project> <node>"
        exit ${EX_USAGE}
    fi

    checkdependency jq

    local project
    project="$1"

    local node
    node="$2"

    info "[project:${project} / node:${node}]:"

    local errlevel

    local output
    output=`run_director "${project}" "${node}" "NO" "NO" check 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        local project_info
        project_info=`run_director "${project}" "${node}" "YES" "NO" describe` || exit $?

        local state
        state=`echo -e "${project_info}" | safe_exc jq -r .state` || exit $?

        debug "Project state is '${state}'"

        local destroy=false

        if [ "${state}" = "DONE" ]; then
            local services_status
            services_status=`echo -e "${project_info}" | safe_exc jq -r '.services.[].status'` || exit $?

            local service_index=0

            local service_status
            for service_status in ${services_status}; do
                if [ "${service_status}" != 0 ]; then
                    destroy=true

                    local service_name
                    service_name=`echo -e "${project_info}" | safe_exc jq -r ".service.[${service_index}].name"` || exit $?

                    warn "Service '${service_name}' has a different status (${service_status}) than expected"
                    
                    break
                fi

                service_index=$((service_index+1))
            done
        else
            destroy=true

            warn "State (${state}) is different than expected"
        fi

        if ${destroy}; then
            destroy "${project}" "${node}"
        fi
    elif [ ${errlevel} -ne ${EX_NOINPUT} ]; then
        if [ -n "${output}" ]; then
            warn "Project '${project}' has an error: ${output}"
        else
            warn "Project '${project}' has an error"
        fi

        destroy "${project}" "${node}"
    fi

    local projectdir="${PROJECTSDIR}/${project}"

    remote_exc "${node}" "YES" "NO" mkdir -p -- "\"${REMOTE_PROJECTSDIR}/${project}\""

    (cd "${projectdir}"; mirror . "${node}:${REMOTE_PROJECTSDIR}/${project}") || exit $?

    remote_exc "${node}" "YES" "NO" \
        "cd \"${REMOTE_PROJECTSDIR}/${project}\"" \; \
        env "DIRECTOR_PROJECT=${project}" \
            "LITTLEJET_NODE=${node}" \
                appjail-director up
}

# usage:
#   sequencial_deploy <project> <nodes>
# args:
#   <project>: Project to deploy.
#   <nodes>: Space-separated list of nodes.
# description:
#   Like parallel_deploy() but deploying all nodes in sequencial fashion.
#
sequencial_deploy()
{
    if [ $# -lt 2 ]; then
        err "usage: sequencial_deploy <project> <nodes>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local nodes
    nodes="$2"

    for node in ${nodes}; do
        deploy "${project}" "${node}"
    done
}

# usage:
#   parallel_deploy <project> <nodes>
# args:
#   <project>: Project to deploy.
#   <nodes>: Space-separated list of nodes.
# description:
#   Like deploy() but deploying all nodes in parallel up to the limit set by the NCPU
#   parameter.
#
parallel_deploy()
{
    if [ $# -lt 2 ]; then
        err "usage: parallel_deploy <project> <nodes>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local nodes
    nodes="$2"

    local output
    output=`tempdir` || exit $?

    atexit_add "removedir \"${output}\""

    local nproc=0

    local node
    for node in ${nodes}; do
        deploy "${project}" "${node}" > "${output}/${node}.out" 2>&1 &

        atexit_add "safe_kill $! $$"

        nproc=$((nproc+1))

        local errlevel

        debug "Job:${nproc}, Total:${NCPU}"

        test "${nproc}" -ge "${NCPU}"

        errlevel=$?

        if [ ${errlevel} -eq 0 ]; then
            debug "Waiting for '${nproc}' jobs"

            nproc=0

            wait || exit $?
        elif [ ${errlevel} -eq 1 ]; then
            continue
        else
            err "Incorrect value for parameter 'NCPU'"
            exit ${EX_CONFIG}
        fi
    done

    wait || exit $?

    for node in ${nodes}; do
        local outfile
        outfile="${output}/${node}.out"

        if [ -f "${outfile}" ]; then
            cat -- "${outfile}"
        fi
    done

    removedir "${output}"
}

# usage:
#   destroy <project> <node>
# args:
#   <project>: Project to destroy.
#   <node>: Destroy the project on this node.
# description:
#   Attempts to remotely destroy a project and then destroy it locally. It may or may
#   not be remotely destroyed due to some unspecified error (e.g. connection error, etc.)
#   and jails may or may not be destroyed if they fail to stop or destroy.
#
destroy()
{
    if [ $# -lt 2 ]; then
        err "usage: destroy <project> <node>"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local node
    node="$2"

    warn "Destroying project '${project}' on '${node}'"

    run_director "${project}" "${node}" "NO" "NO" \
        down --ignore-failed -d

    local remote_projectdir
    remote_projectdir="${REMOTE_PROJECTSDIR}/${project}"

    debug "Removing '${node}:${remote_projectdir}'"

    remote_exc "${node}" "NO" "NO" rm -rf -- "${remote_projectdir}"
}

# usage:
#   load_config
# description:
#   Load the file specified in the LITTLEJET_DEFAULT_CONFIG and LITTLEJET_USER_CONFIG
#   environment variables as your configuration files.
#
load_config()
{
    local default_config
    default_config="${LITTLEJET_DEFAULT_CONFIG}"
    
    if [ -z "${default_config}" ]; then
        err "LITTLEJET_DEFAULT_CONFIG: environment variable hasn't been defined."
        exit ${EX_CONFIG}
    fi

    if [ ! -f "${default_config}" ]; then
        err "${default_config}: default configuration file cannot be found."
        exit ${EX_NOINPUT}
    fi

    . "${default_config}"

    local user_config
    user_config="${LITTLEJET_USER_CONFIG}"

    if [ -n "${user_config}" ]; then
        if [ ! -f "${user_config}" ]; then
            err "${user_config}: user configuration file cannot be found."
            exit ${EX_NOINPUT}
        fi

        . "${user_config}"
    fi
}

# usage:
#   mirror <args> ...
# description:
#   Wrapper for cpdup(1) with -s0 and -i0 set. This also sets -X to point to the file
#   specified by the CPIGNORE parameter.
#
mirror()
{
    if [ $# -eq 0 ]; then
        err "usage: mirror <args> ..."
        exit ${EX_USAGE}
    fi

    checkdependency cpdup

    local output

    output=`safe_exc cpdup -s0 -i0 -X "${CPIGNORE}" "$@"` || exit $?
    output=`echo -e "${output}" | sed -Ee '/Handshaked with .+/d'`

    if [ -n "${output}" ]; then
        info "cpdup: ${output}"
    fi
}

# usage:
#   tempdir
# description:
#   Create a temporary directory.
#
tempdir()
{
    safe_exc mktemp -dt littlejet
}

# usage:
#   tempfile
# description:
#   Create a temporary file.
tempfile()
{
    safe_exc mktemp -t littlejet
}

# usage:
#   testnode <node>
# description:
#   Performs a basic check: attempts to connect to the node and runs the true(1) utility.
#   If the connection fails for any reason, the test fails.
#
testnode()
{
    local node
    node="$1"

    if [ -z "${node}" ]; then
        err "usage: testnode <node>"
        exit ${EX_USAGE}
    fi

    remote_exc "${node}" "NO" "NO" true
}

# usage:
#   run_director <node> <use-safe_exc> <dirty-output> <args> ...
# args:
#   <node>: Node to connect to and execute the command.
#   <use-safe_exc>: If YES, use the safe_exc() function to execute the command.
#   <dirty-output>: If NO, use sansi(1) to remove those control characters.
#   <args>: Command and its arguments.
# description:
#   Remotely execute a command on a node.
#
run_director()
{
    if [ $# -eq 0 ]; then
        err "usage: run_director <project> <node> [YES|NO] [YES|NO] [<args> ...]"
        exit ${EX_USAGE}
    fi

    local project
    project="$1"

    local node
    node="$2"

    local safe_exc
    safe_exc="$3"

    local be_dirty
    be_dirty="$4"

    shift 4

    local use_workdir

    local errlevel

    local remote_projectdir
    remote_projectdir="${REMOTE_PROJECTSDIR}/${project}"

    local output
    output=`remote_exc "${node}" "NO" "NO" test -d "\"${remote_projectdir}\"" 2>&1`

    errlevel=$?

    if [ ${errlevel} -eq 0 ]; then
        use_workdir=true
    elif [ ${errlevel} -eq 1 ]; then
        use_workdir=false
    else
        use_workdir=false

        warn "Could not use working directory '${remote_projectdir}': ${output}"
    fi

    if ${use_workdir}; then
        remote_exc "${node}" "${safe_exc}" "${be_dirty}" \
            cd "\"${remote_projectdir}\";" \
            env "DIRECTOR_PROJECT=${project}" \
                "LITTLEJET_NODE=${node}" \
                    appjail-director "$@"
    else
        remote_exc "${node}" "${safe_exc}" "${be_dirty}" \
            env "DIRECTOR_PROJECT=${project}" \
                "LITTLEJET_NODE=${node}" \
                    appjail-director "$@"
    fi
}

# usage:
#   humanize_number <number>
# description:
#   Humanize a number as specified in humanize_number(3).
#
humanize_number()
{
    if [ $# -lt 1 ]; then
        err "usage: humanize_number <number>"
        exit ${EX_USAGE}
    fi

    local number
    number="$1"

    if ! is_human_number "${number}"; then
        err "usage: humanize_number <number>"
        exit ${EX_DATAERR}
    fi

    local multiplier

    case "${number}" in
        *k)
            multiplier=1000
            ;;
        *K)
            multiplier=1024
            ;;
        *m)
            multiplier=1000000
            ;;
        *M)
            multiplier=1048576
            ;;
        *g)
            multiplier=1000000000
            ;;
        *G)
            multiplier=1073741824
            ;;
        *t)
            multiplier=1000000000000
            ;;
        *T)
            multiplier=1099511627776
            ;;
        *p)
            multiplier=1000000000000000
            ;;
        *P)
            multiplier=1125899906842624
            ;;
        *e)
            multiplier=1000000000000000000
            ;;
        *E)
            multiplier=1152921504606846976
            ;;
        *)
            if checknumber "${number}"; then
                echo "${number}"
                return ${EX_OK}
            else
                err "${number}: invalid number."
                exit ${EX_DATAERR}
            fi
            ;;
    esac

    local bak_number
    bak_number="${number}"

    number=`printf "%s" "${number}" | sed -Ee 's/^([0-9]+)[kKmMgGtTpPeE]$/\1/'`

    if [ ${number} -eq 0 ]; then
        echo 0
        return ${EX_OK}
    fi

    number=$((number*multiplier))

    if [ ${number} -le 0 ]; then
        err "${bak_number}: number too long."
        exit ${EX_DATAERR}
    fi

    echo "${number}"

    return ${EX_OK}
}

# usage:
#   is_human_number <number>
# description:
#   Check if a number is valid for humanization.
#
is_human_number()
{
    if [ $# -lt 1 ]; then
        err "usage: is_human_number <number>"
        exit ${EX_USAGE}
    fi

    local number
    number="$1"

    if printf "%s" "${number}" | grep -qEe '^[0-9]+[kKmMgGtTpPeE]?$'; then
        return 0
    else
        return 1
    fi
}

# usage:
#   checknumber <number>
# description:
#   Check if the string is a valid number.
checknumber()
{
    if [ $# -lt 1 ]; then
        err "usage: checknumber <number>"
        exit ${EX_USAGE}
    fi

    local number
    number="$1"

    local errlevel

    test 0 -eq "${number}" 2> /dev/null

    errlevel=$?

    if [ ${errlevel} -eq 0 -o ${errlevel} -eq 1 ]; then
        return 0
    else
        return 1
    fi
}

# usage:
#   safe_kill <pid> [<expected-pid>] [<duration>]
# args:
#   <pid>: Pid to kill.
#   <expected-pid>: Expected parent process ID. Default: the process ID of the script itself.
#   <duration>: Wait the specified time before exiting with a status other than 0. Default: 30
#
safe_kill()
{
    if [ $# -lt 1 ]; then
        err "usage: safe_kill <pid> [<expected-pid>] [<duration>]"
        exit ${EX_USAGE}
    fi

    local pid
    pid=$1

    local expected_pid
    expected_pid="$2"

    if [ -z "${expected_pid}" ]; then
        expected_pid=$$
    fi

    local duration
    duration="${3:-30}"

    local ppid
    ppid=`get_ppid ${pid}`

    local errlevel=0

    # Process does not exist.
    if [ -z "${ppid}" ]; then
        return ${errlevel}
    fi

    if [ ${ppid} -eq ${expected_pid} ]; then
        kill ${pid} > /dev/null 2>&1

        pwait -o -t "${duration}" ${pid} > /dev/null 2>&1

        errlevel=$?

        if [ ${errlevel} -eq 124 ]; then
            warn "Timeout has been reached, pid ${pid} is still running!"
        fi
    fi

    return ${errlevel}
}

# usage:
#   random_number <begin> <end>
# description:
#   Generates a random number between a specific range.
#
random_number()
{
    if [ $# -lt 2 ]; then
        err "usage: random_number <begin> <end>"
        exit ${EX_USAGE}
    fi

    local begin
    begin="$1"

    local end
    end="$2"

    jot -r 1 "${begin}" "${end}"
}

# usage:
#   kill_proc_tree <pid>
# description:
#  Use safest_kill() to kill the pid and its child processes.
#
kill_proc_tree()
{
    if [ $# -lt 1 ]; then
        err "usage: kill_proc_tree <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid="$1"

    local tokill
    for tokill in `get_proc_tree "${pid}" | tail -r`; do
        safest_kill "${tokill}"
    done
}

# usage:
#   safest_kill <pid>
# description:
#   This is considered a bit safer than safe_kill() because it attempts to send multiple
#   SIGTERM signals at random seconds between alternate sleeps and if the process
#   refuses to terminate, it will be terminated using the SIGKILL signal.
#
safest_kill()
{
    if [ $# -lt 1 ]; then
        err "usage: safest_kill <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid=$1

    local retry=1
    local total=3

    while [ ${retry} -le ${total} ]; do
        debug "Sending SIGTERM (${retry}/${total}) -> ${pid}"

        kill ${pid} > /dev/null 2>&1

        if ! check_proc ${pid}; then
            return 0
        fi

        sleep `random_number 1 3`.`random_number 3 9`

        retry=$((retry+1))
    done

    if check_proc ${pid}; then
        debug "Sending SIGKILL -> ${pid}"

        kill -KILL ${pid} > /dev/null 2>&1
    fi
}

# usage:
#   check_proc <pid>
# description:
#   Check if the process exists.
check_proc()
{
    if [ $# -lt 1 ]; then
        err "usage: check_proc <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid=$1

    if [ `ps -o pid -p ${pid} | wc -l` -eq 2 ]; then
        return 0
    else
        return 1
    fi
}

# usage:
#   get_proc_tree <ppid>
# description:
#   Get a list of child processes from the specified parent PID.
#
get_proc_tree()
{
    if [ $# -lt 1 ]; then
        err "usage: get_proc_tree <ppid>"
        exit ${EX_USAGE}
    fi

    local ppid
    ppid=$1

    local pid
    for pid in `pgrep -P ${ppid}`; do
        echo ${pid}

        get_proc_tree ${pid}
    done
}

# usage:
#   get_ppid <pid>
# description:
#   Get the parent ID of the specified process ID.
#
get_ppid()
{
    if [ $# -lt 1 ]; then
        err "usage: get_ppid <pid>"
        exit ${EX_USAGE}
    fi

    local pid
    pid="$1"

    ps -p "${pid}" -o ppid | grep -v PPID | awk '{print $1}'
}

# usage:
#   atexit_init [<ignored-signals>] [<handled-signals>]
# args:
#   <ignored-signals>: Signals to ignore.
#   <handled-signals>: Signals to handle.
# description:
#   Configures the signals to be handled and ignored. The atexit_cleanup() function
#   is executed on exit or when any of the handled signals are triggered.
#
atexit_init()
{
    _ATEXIT_IGNORED_SIGNALS="$1"
    if [ -z "${_ATEXIT_IGNORED_SIGNALS}" ]; then
        _ATEXIT_IGNORED_SIGNALS="SIGALRM SIGVTALRM SIGPROF SIGUSR1 SIGUSR2"
    fi

    _ATEXIT_HANDLED_SIGNALS="$2"
    if [ -z "${_ATEXIT_HANDLED_SIGNALS}" ]; then
        _ATEXIT_HANDLED_SIGNALS="SIGHUP SIGINT SIGQUIT SIGTERM SIGXCPU SIGXFSZ"
    fi

    debug "Creating atexit() file"

    local errlevel

    _ATEXIT_FILE=`tempfile`

    errlevel=$?

    if [ ${errlevel} -ne 0 ]; then
        err "atexit() error: ${_ATEXIT_FILE}"
        exit ${errlevel}
    fi

    debug "atexit file() is '${_ATEXIT_FILE}'"
    debug "Signals to ignore: ${_ATEXIT_IGNORED_SIGNALS}"
    debug "Signals to handle: ${_ATEXIT_HANDLED_SIGNALS}"

    trap '' ${_ATEXIT_IGNORED_SIGNALS}
    trap "_ATEXIT_ERRLEVEL=\$?; atexit_cleanup; exit \${_ATEXIT_ERRLEVEL}" EXIT
    trap "atexit_cleanup; exit 70" ${_ATEXIT_HANDLED_SIGNALS}
}

# usage:
#   atexit_cleanup
# description:
#   This function will be executed when a signal configured in atexit_init() is
#   triggered.
#
atexit_cleanup()
{
    # ignore
    trap '' ${_ATEXIT_HANDLED_SIGNALS} EXIT

    if [ -f "${_ATEXIT_FILE}" ]; then
        /bin/sh "${_ATEXIT_FILE}"
        rm -f -- "${_ATEXIT_FILE}"
    fi

    # restore
    trap - ${_ATEXIT_IGNORED_SIGNALS} ${_ATEXIT_HANDLED_SIGNALS} EXIT
}

# usage:
#   atexit_add <command> [<args> ...]
# description:
#   Adds a command to the atexit list that will be executed when a signal configured
#   in atexit_init() is triggered.
#
atexit_add()
{
    if [ $# -eq 0 ]; then
        err "usage: atexit_add <command> [<args> ...]"
        exit ${EX_USAGE}
    fi

    local command
    command="$@"

    if [ ! -f "${_ATEXIT_FILE}" ]; then
        err "You must first execute atexit_init() function before use this function."
        exit ${EX_NOINPUT}
    fi

    if ! printf "%s\n" "${command}" >> "${_ATEXIT_FILE}"; then
        err "Could not add a command to the atexit file."
        exit ${EX_IOERR}
    fi
}

# usage:
#   removedir <dir>
# args:
#   <dir>: Directory to remove.
# description:
#   Remove a directory if exists.
#
removedir()
{
    if [ $# -lt 1 ]; then
        err "usage: removedir <dir>"
        exit ${EX_USAGE}
    fi

    local dir
    dir="$1"

    if [ -d "${dir}" ]; then
        rm -rf -- "${dir}"
    fi
}

# usage:
#   removefile <file>
# args:
#   <file>: File to remove.
# description:
#   Remove a file if exists.
#
removefile()
{
    if [ $# -lt 1 ]; then
        err "usage: removefile <file>"
        exit ${EX_USAGE}
    fi

    local file
    file="$1"

    if [ -f "${file}" ]; then
        rm -f -- "${file}"
    fi
}
